name: Build and Push Submodule Images

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/build-and-push-images.yml'
      - 'gpt-researcher/**'
      - 'litellm/**'
      - 'open-webui/**'
      - 'deployment/**'
  workflow_dispatch:
    inputs:
      submodule:
        description: 'Specific submodule to build (leave empty for all)'
        required: false
        type: choice
        options:
          - all
          - litellm
          - open-webui
          - gpt-researcher-mcp
          - mcp-bridge
          - bridge-gptr
        default: 'all'

env:
  REGISTRY: ghcr.io
  NAMESPACE: ai-cfia
  REPO: louis

jobs:
  # Split jobs into separate workflows that can run independently
  
  # Job for litellm
  build-litellm:
    name: Build litellm
    if: github.event.inputs.submodule == 'all' || github.event.inputs.submodule == 'litellm' || github.event.inputs.submodule == ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get submodule commit hash
        id: submodule
        run: |
          cd ./litellm
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPO }}/litellm
          tags: |
            type=raw,value=louis-main
            type=raw,value=louis-${{ steps.submodule.outputs.COMMIT_HASH }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./litellm
          file: ./litellm/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job for open-webui (separate workflow)
  build-open-webui:
    name: Build open-webui
    if: github.event.inputs.submodule == 'all' || github.event.inputs.submodule == 'open-webui' || github.event.inputs.submodule == ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # No dependencies - runs independently
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get submodule commit hash
        id: submodule
        run: |
          cd ./open-webui
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPO }}/open-webui
          tags: |
            type=raw,value=louis-main
            type=raw,value=louis-${{ steps.submodule.outputs.COMMIT_HASH }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./open-webui
          file: ./open-webui/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job for gpt-researcher-mcp (separate workflow)
  build-gpt-researcher-mcp:
    name: Build gpt-researcher-mcp
    if: github.event.inputs.submodule == 'all' || github.event.inputs.submodule == 'gpt-researcher-mcp' || github.event.inputs.submodule == ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # No dependencies - runs independently
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get submodule commit hash
        id: submodule
        run: |
          cd gpt-researcher
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPO }}/gpt-researcher-mcp
          tags: |
            type=raw,value=louis-main
            type=raw,value=louis-${{ steps.submodule.outputs.COMMIT_HASH }}

      - name: Build and push Docker image
        id: build-push
        continue-on-error: true
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/gpt-researcher-mcp/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check build status
        if: steps.build-push.outcome == 'failure'
        run: |
          echo "⚠️ gpt-researcher-mcp build failed but workflow will continue"

  # Job for mcp-bridge (separate workflow)
  build-mcp-bridge:
    name: Build mcp-bridge
    if: github.event.inputs.submodule == 'all' || github.event.inputs.submodule == 'mcp-bridge' || github.event.inputs.submodule == ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # No dependencies - runs independently
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get submodule commit hash
        id: submodule
        run: |
          cd .
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPO }}/mcp-bridge
          tags: |
            type=raw,value=louis-main
            type=raw,value=louis-${{ steps.submodule.outputs.COMMIT_HASH }}

      - name: Build and push Docker image
        id: build-push
        continue-on-error: true
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/mcp-bridge/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check build status
        if: steps.build-push.outcome == 'failure'
        run: |
          echo "⚠️ mcp-bridge build failed but workflow will continue"

  # Job for bridge-gptr (separate workflow)
  build-bridge-gptr:
    name: Build bridge-gptr
    if: github.event.inputs.submodule == 'all' || github.event.inputs.submodule == 'bridge-gptr' || github.event.inputs.submodule == ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # No dependencies - runs independently
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get submodule commit hash
        id: submodule
        run: |
          cd .
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.REPO }}/bridge-gptr
          tags: |
            type=raw,value=louis-main
            type=raw,value=louis-${{ steps.submodule.outputs.COMMIT_HASH }}

      - name: Build and push Docker image
        id: build-push
        continue-on-error: true
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/bridge-gptr/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check build status
        if: steps.build-push.outcome == 'failure'
        run: |
          echo "⚠️ bridge-gptr build failed but workflow will continue"

  # Summary job to report on build statuses
  build-summary:
    name: Build Summary
    if: ${{ always() }}
    needs: [build-litellm, build-open-webui, build-gpt-researcher-mcp, build-mcp-bridge, build-bridge-gptr]
    runs-on: ubuntu-latest
    steps:
      - name: Summarize Build Results
        run: |
          echo "# 🏗️ Build Results Summary"
          echo "| Module | Status |"
          echo "|--------|--------|"
          echo "| litellm | ${{ needs.build-litellm.result == 'success' && '✅ Success' || '❌ Failed' }} |"
          echo "| open-webui | ${{ needs.build-open-webui.result == 'success' && '✅ Success' || '❌ Failed' }} |"
          echo "| gpt-researcher-mcp | ${{ needs.build-gpt-researcher-mcp.result == 'success' && '✅ Success' || '❌ Failed' }} |"
          echo "| mcp-bridge | ${{ needs.build-mcp-bridge.result == 'success' && '✅ Success' || '❌ Failed' }} |"
          echo "| bridge-gptr | ${{ needs.build-bridge-gptr.result == 'success' && '✅ Success' || '❌ Failed' }} |" 